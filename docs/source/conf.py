# -*- coding: utf-8 -*-
#
# Seqan3 documentation build configuration file, created by
# sphinx-quickstart on Wed Feb 14 11:57:40 2018.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# sys.path.insert(0, os.path.abspath('.'))

# This script resides in docs/source. If we need to pass a path to a file directly in this file, we need to pass the
# relative path regarding docs/source. 
# On Read The Docs, the working directory for invoking sphinx is docs/source, locally it's docs.
# When calling subprocesses within this scirpt, we need to pass relative paths regarding the working directory.

import os, subprocess, sys, time

# Represents the environment variable READTHEDOCS that is set to 'True' if run by Read The Docs.
READ_THE_DOCS = False
# Store original source directory for use in recursive functions
SOURCE_DIR = ""

# Connect with Sphinx
def setup(app):

    global READ_THE_DOCS 
    READ_THE_DOCS = os.environ.get("READTHEDOCS", None) == "True"
    os.environ["READTHEDOCS_VERSION"] = "dev"
    # Every time a new build is requested, we start generate_rtd
    app.connect("builder-inited", generate_rtd)


# Generate Read The Docs docs
def generate_rtd(app):

    # Set paths depending on whether we build on Read The Docs or locally    
    if READ_THE_DOCS:
        cloneDir = "../../seqan3"
        doxygenDir = "../../doxygen"
        includeDir = "../seqan3/include/seqan3/"
        insourceDir = "../../seqan3/include/seqan3"
        sourceDir = "../source/"
    else:
        cloneDir = "../seqan3"
        doxygenDir = "../doxygen"
        includeDir = "../seqan3/include/seqan3/"
        insourceDir = includeDir
        sourceDir = "./source/"

    global SOURCE_DIR
    SOURCE_DIR = sourceDir

    # Clone the SeqAn Repository
    download_seqan(cloneDir)
    if READ_THE_DOCS: time.sleep(5)

    # Run Doxygen
    run_doxygen(doxygenDir, includeDir)
    if READ_THE_DOCS: time.sleep(5)

    # Generate RST files
    generate_source(insourceDir, sourceDir)


# Run Doxygen in folder, needs SeqAn3 include directoy as includeDir
def run_doxygen(folder, includeDir=None):

    subprocess.check_call("cd {}; cmake -DSEQAN3_INCLUDE_DIR={} .".format(folder, includeDir), shell=True)
    if READ_THE_DOCS: time.sleep(5)
    subprocess.check_call("cd {}; make doc_devel".format(folder), shell=True)


# Clone SeqAn3 Repository into folder
def download_seqan(folder):

    subprocess.check_call("""if [ ! -d {folder} ] ; then
                                git clone -b fix_docs {url} {folder}
                             else
                                cd {folder}
                                git pull {url}
                             fi""".format(folder=folder, url="https://github.com/eseiler/seqan3.git"), shell=True)

# Generate RST files for Read The Docs
def generate_source(inDir, outDir):

    generateIndex(inDir, outDir)
    generateRSTs(inDir, outDir, True)


#  written by Jongkyu Kim (j.kim@fu-berlin.de)

# Generate index.rst
def generateIndex(inDir, outDir):
    listModules = []
    for fileName in os.listdir(inDir) :
        if os.path.isdir(os.path.join(inDir, fileName)):
            listModules.append(fileName)  
    listModules = sorted(listModules)

    # generate index.rst
    inFile = open(os.path.join(outDir, "_index.rst"), "r")
    outFile = open(os.path.join(outDir, "index.rst"), "w")
    for line in inFile :
        outFile.write(line)
    inFile.close()
    outFile.write("   :caption: Modules:\n\n")
    for moduleName in listModules :
        outFile.write("   {}\n".format(moduleName))
    outFile.close()

# Generate RSTs for all modules
def generateRSTs(inDir, outDir, isRoot=False):
    listModules = []
    listFiles = []
    for fileName in os.listdir(inDir) :
        if os.path.isdir(os.path.join(inDir, fileName)) == True:
            listModules.append(fileName)  
        else :
            fileExt = os.path.splitext(fileName)[1]
            if fileExt == ".hpp" or fileExt == ".cpp" :
                listFiles.append(fileName)
    
    listModules = sorted(listModules)
    listFiles = sorted(listFiles)

    print isRoot, inDir, outDir, listModules, listFiles

    if isRoot == False :
        moduleName = os.path.basename(outDir)
        generateRST(outDir, moduleName, listModules, listFiles)

    for moduleName in listModules :
        curInDir = os.path.join(inDir, moduleName)
        curOutDir = os.path.join(outDir, moduleName)
        generateRSTs(curInDir, curOutDir, False)


# Generate RST for a single module
def generateRST(outDir, moduleName, listModules, listFiles) :
    if len(listModules) > 0 and os.path.isdir(outDir) == False:
        os.mkdir(outDir)

    # title
    outFile = open(os.path.join(os.path.dirname(outDir), os.path.basename(outDir)+".rst"), "w")
    outFile.write("{}{}\n".format(moduleName[0].upper(), moduleName[1:]))
    outFile.write("{}\n\n".format("=" * len(moduleName)))

    # doxygenfile
    for fileName in listFiles :
        outFile.write(".. doxygenfile:: {}\n".format((os.path.join(outDir.replace(SOURCE_DIR, ''), fileName))))
        outFile.write("   :project: Seqan3\n\n")

    # toctree
    outFile.write(".. toctree::\n")
    outFile.write("   :caption: MODULES:\n")
    outFile.write("   :titlesonly:\n")
    outFile.write("   :maxdepth: 1\n")
    outFile.write("   :hidden:\n\n")
    for childModuleName in listModules :
       outFile.write("   {}\n".format(os.path.join(moduleName, childModuleName)))
    outFile.close()


# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['breathe']
breathe_projects = { "Seqan3": "../../doxygen/devel_doc/xml/" }
breathe_default_project = "Seqan3"

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Seqan3'
copyright = u'2018, Seqan Developers'
author = u'Seqan Developers'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = u'0.0.1'
# The full version, including alpha/beta/rc tags.
release = u'0.0.1'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    '**': [
        'relations.html',  # needs 'show_related': True theme option to display
        'searchbox.html',
    ]
}


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'Seqan3doc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'Seqan3.tex', u'Seqan3 Documentation',
     u'Enrico Seiler', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'seqan3', u'Seqan3 Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'Seqan3', u'Seqan3 Documentation',
     author, 'Seqan3', 'One line description of project.',
     'Miscellaneous'),
]
